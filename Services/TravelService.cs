using project.Models;

namespace project.Services
{
    public class TravelService : ITravelService
    {
        private readonly ILogger<TravelService> _logger;

        public TravelService(ILogger<TravelService> logger)
        {
            _logger = logger;
        }

        public async Task<TravelPlan> GenerateTravelPlanAsync(TravelPlanRequest request)
        {
            await Task.Delay(1000); // Simulate AI processing

            var days = (request.EndDate - request.StartDate).Days + 1;

            return new TravelPlan
            {
                Id = new Random().Next(1, 1000),
                Destination = request.Destination,
                StartDate = request.StartDate,
                EndDate = request.EndDate,
                NumberOfTravelers = request.NumberOfTravelers,
                Budget = request.Budget,
                TravelPreferences = request.TravelPreferences ?? "",
                CreatedAt = DateTime.Now,
                GeneratedItinerary = GenerateItinerary(request, days),
                Accommodations = GetAccommodations(request.Destination),
                Activities = GetActivities(request.Destination, null),
                Transportation = GetTransportation()
            };
        }

        public async Task<List<TravelSuggestion>> GetDestinationSuggestionsAsync(string query)
        {
            await Task.Delay(200);

            var destinations = new List<string>
            {
                "Paris, France", "Tokyo, Japan", "New York, USA", "Rome, Italy",
                "Barcelona, Spain", "London, UK", "Amsterdam, Netherlands",
                "Prague, Czech Republic", "Istanbul, Turkey", "Bangkok, Thailand"
            };

            return destinations
                .Where(d => d.Contains(query, StringComparison.OrdinalIgnoreCase))
                .Take(6)
                .Select(d => new TravelSuggestion
                {
                    Type = "Destination",
                    Name = d,
                    Description = $"Amazing destination with rich culture",
                    Priority = 1
                })
                .ToList();
        }

        private string GenerateItinerary(TravelPlanRequest request, int days)
        {
            var itinerary = $"🌟 Your {days}-Day AI Travel Plan for {request.Destination}\n\n";

            for (int day = 1; day <= Math.Min(days, 7); day++)
            {
                var currentDate = request.StartDate.AddDays(day - 1);
                itinerary += $"📅 Day {day} - {currentDate:MMM dd, yyyy}\n";
                itinerary += $"  🌅 Morning: Explore main attractions\n";
                itinerary += $"  🍽️ Lunch: Try local cuisine\n";
                itinerary += $"  🎯 Afternoon: {GetDayActivity(null, day)}\n";
                itinerary += $"  🌆 Evening: Relax and enjoy local culture\n\n";
            }

            itinerary += "💡 This itinerary was generated by AI based on your preferences.\n";
            itinerary += "Feel free to adjust based on your personal schedule!";

            return itinerary;
        }

        private string GetDayActivity(List<string>? interests, int day)
        {
            interests ??= new List<string>();
            if (interests.Contains("Culture")) return "Visit museums and historic sites";
            if (interests.Contains("Adventure")) return "Outdoor activities and adventures";
            if (interests.Contains("Food")) return "Food tour and culinary experiences";
            if (interests.Contains("Shopping")) return "Shopping districts and local markets";
            return "Discover local attractions and hidden gems";
        }

        private List<string> GetAccommodations(string destination)
        {
            return new List<string>
            {
                $"Premium Hotel in {destination}",
                $"Boutique Accommodation {destination}",
                $"Budget-Friendly Option {destination}",
                $"Vacation Rental {destination}"
            };
        }

        private List<string> GetActivities(string destination, List<string>? interests)
        {
            interests ??= new List<string>();
            var activities = new List<string>
            {
                $"Walking Tour of {destination}",
                $"{destination} Food Experience",
                $"Cultural Sites in {destination}",
                $"Local Markets and Shopping"
            };

            if (interests.Contains("Adventure"))
                activities.Add($"Adventure Activities in {destination}");
            if (interests.Contains("Culture"))
                activities.Add($"Museums and Historic Sites");

            return activities;
        }

        private List<string> GetTransportation()
        {
            return new List<string>
            {
                "Airport Transfer Service",
                "Public Transportation Pass",
                "Rental Car Options",
                "Taxi and Ride-sharing"
            };
        }
    }
}