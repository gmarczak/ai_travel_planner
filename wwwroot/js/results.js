// Global object to hold travel plan data
let travelPlan = {};

// --- CORE FUNCTIONS ---

/**
 * Initializes the result page, parses data, and sets up event listeners.
 */
function initializeResultPage() {
    const dataElement = document.getElementById('travel-plan-data');
    if (!dataElement) {
        console.error('Travel plan data script tag not found.');
        return;
    }

    try {
        travelPlan = JSON.parse(dataElement.textContent);
        setupEventListeners();
        checkIfPlanIsSaved();
    } catch (error) {
        console.error('Failed to parse travel plan JSON data:', error);
        showNotification('Error loading travel plan details.', 'error');
    }
}

/**
 * Sets up all necessary event listeners for the page buttons.
 */
function setupEventListeners() {
    // The onclick attributes are already in the HTML, but this is an alternative
    // if you remove them. Example:
    // const saveBtn = document.getElementById('saveBtn');
    // if (saveBtn) saveBtn.addEventListener('click', savePlan);
}

/**
 * Checks if the current plan is already in localStorage and updates the UI.
 */
function checkIfPlanIsSaved() {
    const savedPlans = getSavedPlans();
    const isSaved = savedPlans.some(p => p.id === travelPlan.id);
    if (isSaved) {
        updateSaveButtonToSavedState();
    }
}


// --- ACTION FUNCTIONS (called from HTML onclick) ---

/**
 * Copies a rich text summary of the travel plan to the clipboard.
 */
function copyFullPlan() {
    if (!travelPlan || !travelPlan.destination) {
        showNotification('No travel plan data to copy.', 'info');
        return;
    }

    const dates = `${new Date(travelPlan.startDate).toLocaleDateString()} - ${new Date(travelPlan.endDate).toLocaleDateString()}`;
    
    const fullPlanText = `
AI TRAVEL PLAN
===============================
Destination: ${travelPlan.destination}
Dates: ${dates}
Travelers: ${travelPlan.numberOfTravelers}
Budget: $${travelPlan.budget.toLocaleString()}

DETAILED ITINERARY:
===============================
${travelPlan.generatedItinerary}

ACCOMMODATIONS:
${travelPlan.accommodations.join('\n- ') || 'Not specified'}

ACTIVITIES:
${travelPlan.activities.join('\n- ') || 'Not specified'}

TRANSPORTATION:
${travelPlan.transportation.join('\n- ') || 'Not specified'}

Generated by AI Travel Planner on ${new Date(travelPlan.createdAt).toLocaleString()}
    `.trim();

    navigator.clipboard.writeText(fullPlanText).then(() => {
        showNotification('Complete travel plan copied to clipboard!', 'success');
    }).catch(err => {
        console.error('Failed to copy: ', err);
        showNotification('Failed to copy travel plan.', 'error');
    });
}

/**
 * Shares the travel plan using the Web Share API if available, otherwise copies it.
 */
function shareTrip() {
    if (navigator.share) {
        navigator.share({
            title: `My Travel Plan to ${travelPlan.destination}`,
            text: `Check out my AI-generated trip to ${travelPlan.destination} for ${travelPlan.numberOfTravelers} people!`,
            url: window.location.href,
        }).catch((error) => console.log('Error sharing:', error));
    } else {
        showNotification('Web Share not supported. Copying plan instead.', 'info');
        copyFullPlan();
    }
}

/**
 * Saves the current travel plan to localStorage.
 */
function savePlan() {
    try {
        const savedPlans = getSavedPlans();
        
        // Avoid duplicates
        if (savedPlans.some(p => p.id === travelPlan.id)) {
            showNotification('This plan is already saved!', 'info');
            updateSaveButtonToSavedState();
            return;
        }

        const planToSave = { ...travelPlan, savedAt: new Date().toISOString() };
        savedPlans.unshift(planToSave);

        // Limit to 10 saved plans
        if (savedPlans.length > 10) {
            savedPlans.splice(10);
        }

        localStorage.setItem('travelPlans', JSON.stringify(savedPlans));
        showNotification('Travel plan saved successfully!', 'success');
        updateSaveButtonToSavedState();

    } catch (error) {
        console.error('Failed to save plan:', error);
        showNotification('Could not save the travel plan.', 'error');
    }
}

/**
 * Displays a list of saved plans (or a message if none).
 */
function showSavedPlans() {
    const savedPlans = getSavedPlans();
    if (savedPlans.length === 0) {
        showNotification('No saved plans found.', 'info');
        return;
    }
    
    // This could be expanded to show a modal with the list of plans
    showNotification(`You have ${savedPlans.length} saved plans.`, 'info');
    console.log('Saved Plans:', savedPlans);
}


// --- UTILITY FUNCTIONS ---

/**
 * Retrieves saved plans from localStorage.
 * @returns {Array} An array of saved plan objects.
 */
function getSavedPlans() {
    return JSON.parse(localStorage.getItem('travelPlans') || '[]');
}

/**
 * Updates the 'Save' button to a 'Saved' state.
 */
function updateSaveButtonToSavedState() {
    const saveBtn = document.getElementById('saveBtn');
    if (saveBtn) {
        saveBtn.innerHTML = '<i class="bi bi-check-circle"></i> Saved';
        saveBtn.classList.remove('btn-outline-warning');
        saveBtn.classList.add('btn-success');
        saveBtn.disabled = true;
    }
}

/**
 * Displays a temporary notification message.
 * @param {string} message - The message to display.
 * @param {string} type - The type of notification ('info', 'success', 'error').
 */
function showNotification(message, type = 'info') {
    const container = document.body;
    const notification = document.createElement('div');
    
    const alertType = type === 'success' ? 'success' : type === 'error' ? 'danger' : 'info';
    const icon = type === 'success' ? '?' : type === 'error' ? '?' : '?';

    notification.className = `alert alert-${alertType} position-fixed`;
    notification.style.cssText = 'top: 20px; right: 20px; z-index: 1050; min-width: 300px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);';
    notification.innerHTML = `
        <div class="d-flex align-items-center">
            <strong class="me-2">${icon}</strong>
            <span>${message}</span>
            <button type="button" class="btn-close ms-auto" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    `;
    
    container.appendChild(notification);

    // Use Bootstrap's alert close event to remove the element
    notification.addEventListener('closed.bs.alert', () => {
        notification.remove();
    });

    // Auto-dismiss
    setTimeout(() => {
        const bsAlert = bootstrap.Alert.getOrCreateInstance(notification);
        if (bsAlert) {
            bsAlert.close();
        }
    }, 5000);
}

// --- INITIALIZATION ---

// Run initialization logic after the DOM is fully loaded.
document.addEventListener('DOMContentLoaded', initializeResultPage);
